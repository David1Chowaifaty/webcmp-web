{"version":3,"file":"cm-switch.js","sourceRoot":"","sources":["../../../src/components/cm-switch/cm-switch.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAgB,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAO9E,MAAM,OAAO,QAAQ;;;;;;;;;EASnB,iBAAiB;IACf,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;EACrC,CAAC;EAEO,aAAa;IACnB,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;IAC7B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;EACxC,CAAC;EAED,aAAa,CAAC,KAAoB;IAChC,IAAI,KAAK,CAAC,GAAG,KAAK,OAAO,EAAE;MACzB,IAAI,CAAC,aAAa,EAAE,CAAC;MACrB,KAAK,CAAC,cAAc,EAAE,CAAC;KACxB;EACH,CAAC;EACD,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH,8BAAsB,IAAI,CAAC,QAAQ,gBAAc,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,EAAC,YAAY;QACzG,aACE,WAAW,EAAC,QAAQ,EACpB,IAAI,EAAC,UAAU,EACf,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,EACnC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,GACrC;QACF,YAAM,KAAK,EAAC,aAAa,GAAQ,CAC3B,CACH,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Event, EventEmitter, Host, Prop, h } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'cm-switch',\r\n  styleUrl: 'cm-switch.css',\r\n  scoped: true,\r\n})\r\nexport class CmSwitch {\r\n  @Prop({ reflect: true }) name: string;\r\n  @Prop({ reflect: true }) required: boolean;\r\n  @Prop({ reflect: true }) disabled: boolean;\r\n  @Prop({ reflect: true }) value: string;\r\n  @Prop({ reflect: true, mutable: true }) checked: boolean;\r\n  @Prop({ reflect: true }) defaultChecked: boolean;\r\n  @Event({ bubbles: true, composed: true }) checkedChange: EventEmitter<boolean>;\r\n\r\n  componentWillLoad() {\r\n    this.checked = this.defaultChecked;\r\n  }\r\n\r\n  private toggleChecked() {\r\n    this.checked = !this.checked;\r\n    this.checkedChange.emit(this.checked);\r\n  }\r\n\r\n  handleKeyDown(event: KeyboardEvent) {\r\n    if (event.key === 'Enter') {\r\n      this.toggleChecked();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <label data-disabled={this.disabled} data-state={this.checked ? 'checked' : 'unchecked'} class=\"SwitchRoot\">\r\n          <input\r\n            placeholder=\"switch\"\r\n            type=\"checkbox\"\r\n            value={this.value}\r\n            disabled={this.disabled}\r\n            name={this.name}\r\n            required={this.required}\r\n            checked={this.checked}\r\n            onInput={() => this.toggleChecked()}\r\n            onKeyDown={e => this.handleKeyDown(e)}\r\n          />\r\n          <span class=\"SwitchThumb\"></span>\r\n        </label>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}