{"file":"cm-checkbox2.js","mappings":";;AAAA,MAAM,aAAa,GAAG,+2CAA+2C;;MCOx3C,UAAU;;;;;;;;;mBAKsC,KAAK;;;;EAKhE,gBAAgB;IACd,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,cAAc,EAAE,IAAI,CAAC,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC,CAAC;IAC5E,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;GAChD;EACD,YAAY;IACV,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;IAC7B,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,cAAc,EAAE,IAAI,CAAC,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC,CAAC;IAC5E,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;GACvC;EACD,MAAM;IACJ,QACE,EAAC,IAAI,QACH,WAAK,KAAK,EAAC,gBAAgB,IACzB,cACE,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,EAC/B,IAAI,EAAC,QAAQ,gBACF,UAAU,EACrB,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,gBACzB,IAAI,CAAC,OAAO,GAAG,SAAS,GAAG,WAAW,EAClD,KAAK,EAAC,IAAI,EACV,EAAE,EAAC,IAAI,EACP,KAAK,EAAC,cAAc,IAEpB,SAAG,KAAK,EAAE,SAAS,eAAc,EACjC,0BAAkB,IAAI,CAAC,OAAO,GAAG,SAAS,GAAG,WAAW,EAAE,KAAK,EAAC,mBAAmB,IACjF,WAAK,KAAK,EAAC,IAAI,EAAC,MAAM,EAAC,IAAI,EAAC,OAAO,EAAC,WAAW,EAAC,IAAI,EAAC,MAAM,EAAC,KAAK,EAAC,4BAA4B,IAC5F,YACE,CAAC,EAAC,+WAA+W,EACjX,IAAI,EAAC,cAAc,eACT,SAAS,eACT,SAAS,GACnB,CACE,CACD,CACA,EACT,aAAO,IAAI,EAAC,UAAU,iBAAa,MAAM,EAAC,QAAQ,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,GAAI,EAC3F,IAAI,CAAC,YAAY,KAChB,aAAO,OAAO,EAAC,IAAI,EAAC,KAAK,EAAC,OAAO,IAC9B,IAAI,CAAC,YAAY,CACZ,CACT,CACG,CACD,EACP;GACH;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/cm-checkbox/cm-checkbox.css?tag=cm-checkbox&encapsulation=scoped","src/components/cm-checkbox/cm-checkbox.tsx"],"sourcesContent":[":host {\r\n  display: block;\r\n  position: relative;\r\n}\r\n.root-container {\r\n  display: flex;\r\n  align-items: center;\r\n  width: min-content;\r\n  height: min-content;\r\n}\r\nbutton {\r\n  all: unset;\r\n}\r\ninput {\r\n  transform: translateX(-100%);\r\n  position: absolute;\r\n  pointer-events: none;\r\n  opacity: 0;\r\n  margin: 0;\r\n  width: 0;\r\n  height: 0;\r\n}\r\n.CheckboxRoot {\r\n  border: 2px solid hsl(var(--border));\r\n  width: 25px;\r\n  height: 25px;\r\n  border-radius: var(--radius);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  box-sizing: border-box;\r\n}\r\n.CheckboxRoot[data-state='checked'] {\r\n  border-width: 0;\r\n  background: hsl(var(--primary));\r\n}\r\n.CheckboxRoot[data-state='checked']:hover {\r\n  background: hsla(var(--primary), 0.8);\r\n}\r\n.CheckboxRoot[data-state='unchecked']:hover {\r\n  background-color: hsla(var(--input), 0.1);\r\n}\r\n.CheckboxRoot:focus-visible {\r\n  outline: 2px solid hsl(var(--ring));\r\n  outline-offset: 2px;\r\n}\r\n\r\n.CheckboxIndicator {\r\n  color: hsl(var(--primary-foreground));\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  opacity: 0;\r\n}\r\n.CheckboxIndicator[data-state='checked'] {\r\n  animation: fadeIn 200ms forwards;\r\n}\r\n.CheckboxIndicator[data-state='unchecked'] {\r\n  animation: fadeOut 200ms forwards;\r\n}\r\n.Label {\r\n  color: var(--foreground);\r\n  padding-left: 15px;\r\n  font-size: 15px;\r\n  line-height: 1;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from {\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n@keyframes fadeOut {\r\n  from {\r\n    opacity: 1;\r\n  }\r\n  to {\r\n    opacity: 0;\r\n  }\r\n}\r\n","import { Component, EventEmitter, Host, Prop, h, Event } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'cm-checkbox',\r\n  styleUrl: 'cm-checkbox.css',\r\n  scoped: true,\r\n})\r\nexport class CmCheckbox {\r\n  @Prop({ reflect: true }) name: string;\r\n  @Prop({ reflect: true }) required: boolean;\r\n  @Prop({ reflect: true }) disabled: boolean;\r\n  @Prop({ reflect: true }) value: string;\r\n  @Prop({ reflect: true, mutable: true }) checked: boolean = false;\r\n  @Prop({ reflect: true }) defaultChecked: boolean;\r\n  @Prop({ reflect: true }) labelMessage: string;\r\n  @Event({ bubbles: true, composed: true }) checkedChange: EventEmitter<boolean>;\r\n  private checkbox: HTMLElement;\r\n  componentDidLoad() {\r\n    this.checkbox.setAttribute('aria-checked', this.checked ? 'true' : 'false');\r\n    this.checkbox.setAttribute('role', 'checkbox');\r\n  }\r\n  handleChange() {\r\n    this.checked = !this.checked;\r\n    this.checkbox.setAttribute('aria-checked', this.checked ? 'true' : 'false');\r\n    this.checkedChange.emit(this.checked);\r\n  }\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div class=\"root-container\">\r\n          <button\r\n            ref={el => (this.checkbox = el)}\r\n            type=\"button\"\r\n            aria-label=\"checkbox\"\r\n            onClick={this.handleChange.bind(this)}\r\n            data-state={this.checked ? 'checked' : 'unchecked'}\r\n            value=\"on\"\r\n            id=\"c1\"\r\n            class=\"CheckboxRoot\"\r\n          >\r\n            <p class={'sr-only'}>checkbox</p>\r\n            <span data-state={this.checked ? 'checked' : 'unchecked'} class=\"CheckboxIndicator\">\r\n              <svg width=\"15\" height=\"15\" viewBox=\"0 0 15 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path\r\n                  d=\"M11.4669 3.72684C11.7558 3.91574 11.8369 4.30308 11.648 4.59198L7.39799 11.092C7.29783 11.2452 7.13556 11.3467 6.95402 11.3699C6.77247 11.3931 6.58989 11.3355 6.45446 11.2124L3.70446 8.71241C3.44905 8.48022 3.43023 8.08494 3.66242 7.82953C3.89461 7.57412 4.28989 7.55529 4.5453 7.78749L6.75292 9.79441L10.6018 3.90792C10.7907 3.61902 11.178 3.53795 11.4669 3.72684Z\"\r\n                  fill=\"currentColor\"\r\n                  fill-rule=\"evenodd\"\r\n                  clip-rule=\"evenodd\"\r\n                />\r\n              </svg>\r\n            </span>\r\n          </button>\r\n          <input type=\"checkbox\" aria-hidden=\"true\" tabindex=\"-1\" value=\"on\" checked={this.checked} />\r\n          {this.labelMessage && (\r\n            <label htmlFor=\"c1\" class=\"Label\">\r\n              {this.labelMessage}\r\n            </label>\r\n          )}\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}