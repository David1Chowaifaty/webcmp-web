{"file":"cm-input2.js","mappings":";;AAAA,MAAM,UAAU,GAAG,u0BAAu0B;;MCO70B,OAAO;;;;;;;;;;;;;;;;;;;;;;;;EAqBlB,MAAM;IACJ,QACE,EAAC,IAAI,QACH,aACE,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,EAAE,EAAE,IAAI,CAAC,OAAO,EAChB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,GAAG,EAAE,IAAI,CAAC,GAAG,EACb,GAAG,EAAE,IAAI,CAAC,GAAG,EACb,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,YAAY,EAAE,IAAI,CAAC,YAAY,EAC/B,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAE,CAAC,CAAC,MAA2B,CAAC,KAAK,CAAC,GAC1E,CACG,EACP;GACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/cm-input/cm-input.css?tag=cm-input&encapsulation=scoped","src/components/cm-input/cm-input.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\ninput {\n  box-sizing: border-box;\n  display: flex;\n  height: 2.25rem;\n  width: 100%;\n  border-radius: var(--radius);\n  border: 1px solid hsl(var(--border));\n  background-color: transparent;\n  padding: 4px 12px;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n  box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\ninput[type='file'] {\n  border: none;\n  background-color: transparent;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n  font-weight: 500;\n}\ninput::placeholder {\n  color: hsl(var(--muted-foreground));\n}\ninput:focus {\n  outline: none;\n  box-shadow: 0 0 0 calc(0px + var(--cm-ring-offset-width)) hsl(var(--ring));\n}\ninput:disabled {\n  cursor: not-allowed;\n  opacity: 0.5;\n}\n","import { Component, EventEmitter, Host, Prop, h, Event } from '@stencil/core';\n\n@Component({\n  tag: 'cm-input',\n  styleUrl: 'cm-input.css',\n  scoped: true,\n})\nexport class CmInput {\n  @Prop({ reflect: true }) type: InputType;\n  @Prop({ reflect: true }) name: string;\n  @Prop({ reflect: true }) placeholder: string;\n  @Prop({ reflect: true }) value: string;\n  @Prop({ reflect: true }) inputid: string;\n  @Prop({ reflect: true }) class: string;\n  @Prop({ reflect: true }) required: boolean;\n  @Prop({ reflect: true }) disabled: boolean;\n  @Prop({ reflect: true }) readonly: boolean;\n  @Prop({ reflect: true }) maxlength: number;\n  @Prop({ reflect: true }) min: string | number;\n  @Prop({ reflect: true }) max: string | number;\n  @Prop({ reflect: true }) step: string | number;\n  @Prop({ reflect: true }) pattern: string;\n  @Prop({ reflect: true }) autocomplete: string;\n  @Prop({ reflect: true }) autofocus: boolean;\n  @Prop({ reflect: true }) size: number;\n  @Prop({ reflect: true }) multiple: boolean;\n  @Event({ bubbles: true, composed: true }) textChanged: EventEmitter<string>;\n\n  render() {\n    return (\n      <Host>\n        <input\n          type={this.type}\n          name={this.name}\n          placeholder={this.placeholder}\n          value={this.value}\n          id={this.inputid}\n          class={this.class}\n          required={this.required}\n          disabled={this.disabled}\n          readonly={this.readonly}\n          maxlength={this.maxlength}\n          min={this.min}\n          max={this.max}\n          step={this.step}\n          pattern={this.pattern}\n          autocomplete={this.autocomplete}\n          autofocus={this.autofocus}\n          size={this.size}\n          multiple={this.multiple}\n          onChange={e => this.textChanged.emit((e.target as HTMLInputElement).value)}\n        />\n      </Host>\n    );\n  }\n}\n"],"version":3}